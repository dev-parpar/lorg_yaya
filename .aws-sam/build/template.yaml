AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An app that includes a DynamoDB table, a Lambda function that writes
  to DynamoDB, and a scheduled EventBridge event
Parameters:
  ApplicationName:
    Type: String
    Default: lorgyaya
    Description: Application name
Globals:
  Api:
    OpenApiVersion: 3.0.3
    EndpointConfiguration: REGIONAL
    AlwaysDeploy: true
    Auth:
      DefaultAuthorizer: CognitoAuthorizer
      Authorizers:
        CognitoAuthorizer:
          UserPoolArn:
            Fn::GetAtt:
            - CognitoUserPool
            - Arn
Resources:
  EventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name:
        Fn::Sub: ${ApplicationName}-event-bus
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName:
        Fn::Sub: ${ApplicationName}-users
      AutoVerifiedAttributes:
      - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      UsernameAttributes:
      - email
      UsernameConfiguration:
        CaseSensitive: false
      Schema:
      - AttributeDataType: String
        Name: email
        Required: true
        Mutable: true
      - Name: given_name
        AttributeDataType: String
        Mutable: true
        Required: true
      - Name: family_name
        AttributeDataType: String
        Mutable: true
        Required: true
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: CognitoUserPool
      ClientName:
        Fn::Sub: ${ApplicationName}-userpool-client
      GenerateSecret: false
      ExplicitAuthFlows:
      - ALLOW_USER_SRP_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      - ALLOW_USER_PASSWORD_AUTH
      SupportedIdentityProviders:
      - COGNITO
      CallbackURLs:
      - urn:ietf:wg:oauth:2.0:oob
      LogoutURLs:
      - urn:ietf:wg:oauth:2.0:oob
      AllowedOAuthScopes:
      - email
      - openid
      - profile
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
      - code
      - implicit
      PreventUserExistenceErrors: ENABLED
      AccessTokenValidity: 1
      IdTokenValidity: 1
      RefreshTokenValidity: 30
  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId:
        Ref: CognitoUserPool
      Domain: lorgyaya-auth-domain
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: item_data_tracker
      AttributeDefinitions:
      - AttributeName: primary_key
        AttributeType: S
      - AttributeName: sort_key
        AttributeType: S
      KeySchema:
      - AttributeName: primary_key
        KeyType: HASH
      - AttributeName: sort_key
        KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      ProvisionedThroughput:
        ReadCapacityUnits: 0
        WriteCapacityUnits: 0
  SignUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth/signup.handler
      Runtime: nodejs18.x
      CodeUri: SignUpFunction
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: CognitoUserPool
          COGNITO_CLIENT_ID:
            Ref: CognitoUserPoolClient
      Events:
        SignUpAPI:
          Type: Api
          Properties:
            Path: /auth/signup
            Method: POST
            Auth:
              Authorizer: NONE
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - cognito-idp:SignUp
          Resource:
            Fn::GetAtt:
            - CognitoUserPool
            - Arn
    Metadata:
      SamResourceId: SignUpFunction
  SignInFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth/signin.handler
      Runtime: nodejs18.x
      CodeUri: SignInFunction
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: CognitoUserPool
          COGNITO_CLIENT_ID:
            Ref: CognitoUserPoolClient
      Events:
        SignInAPI:
          Type: Api
          Properties:
            Path: /auth/signin
            Method: POST
            Auth:
              Authorizer: NONE
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - cognito-idp:InitiateAuth
          Resource:
            Fn::GetAtt:
            - CognitoUserPool
            - Arn
    Metadata:
      SamResourceId: SignInFunction
  VerifyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth/verify.handler
      Runtime: nodejs18.x
      CodeUri: VerifyFunction
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: CognitoUserPool
          COGNITO_CLIENT_ID:
            Ref: CognitoUserPoolClient
          EVENT_BUS_NAME:
            Ref: EventBus
      Events:
        VerifyAPI:
          Type: Api
          Properties:
            Path: /auth/verify
            Method: POST
            Auth:
              Authorizer: NONE
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - cognito-idp:ConfirmSignUp
          - cognito-idp:AdminGetUser
          - events:PutEvents
          Resource:
            Fn::GetAtt:
            - CognitoUserPool
            - Arn
        - Effect: Allow
          Action: events:PutEvents
          Resource:
            Fn::GetAtt:
            - EventBus
            - Arn
    Metadata:
      SamResourceId: VerifyFunction
  AddHouseFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/addHouse.handler
      Runtime: nodejs18.x
      CodeUri: AddHouseFunction
      Environment:
        Variables:
          EVENT_BUS_NAME:
            Ref: EventBus
          AWS_REGION:
            Ref: AWS::Region
      Events:
        AddHouseAPI:
          Type: Api
          Properties:
            Path: /data/house/add
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
              AuthorizationScopes:
              - email
              - profile
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - events:PutEvents
          Resource:
            Fn::GetAtt:
            - EventBus
            - Arn
    Metadata:
      SamResourceId: AddHouseFunction
  UserDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/userDataToDb.handler
      Runtime: nodejs18.x
      CodeUri: UserDataFunction
      Environment:
        Variables:
          USER_POOL_ID:
            Ref: CognitoUserPool
          COGNITO_CLIENT_ID:
            Ref: CognitoUserPoolClient
          DYNAMODB_TABLE_NAME:
            Ref: DynamoDBTable
      Events:
        UserDataAPI:
          Type: Api
          Properties:
            Path: /data/user_data
            Method: POST
            Auth:
              Authorizer: NONE
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - cognito-idp:AdminGetUser
          Resource:
            Fn::GetAtt:
            - CognitoUserPool
            - Arn
        - Effect: Allow
          Action:
          - events:ReceiveEvent
          Resource:
            Fn::GetAtt:
            - EventBus
            - Arn
      - DynamoDBCrudPolicy:
          TableName:
            Ref: DynamoDBTable
    Metadata:
      SamResourceId: UserDataFunction
  EventBridgeLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName:
        Fn::Sub: /aws/events/${ApplicationName}-events
      RetentionInDays: 14
  CustomAuthEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Rule to capture custom auth events and trigger the userDataToDb
        function
      EventBusName:
        Ref: EventBus
      EventPattern:
        source:
        - custom.auth
        detail-type:
        - ProfileCreation
        detail:
          eventName:
          - USER_PROFILE_CREATE
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - UserDataFunction
          - Arn
        Id: UserDataFunctionTarget
      - Arn:
          Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/events/${ApplicationName}-events:*
        Id: EventLogTarget
        RetryPolicy:
          MaximumRetryAttempts: 3
  UserDataFunctionEventPermission2:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - UserDataFunction
        - Arn
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - CustomAuthEventRule
        - Arn
  EventBridgeCLoudWatchLogsPolicy:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: EventBridgeCloudWatchLogsPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
              Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/events/${ApplicationName}-events:*
          - Effect: Allow
            Action:
            - events:PutEvents
            Resource:
              Fn::GetAtt:
              - EventBus
              - Arn
  EventBridgeLogGroupPolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: EventBridgeToCloudWatchLogs
      PolicyDocument:
        Fn::Sub: "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n \
          \     \"Sid\": \"EventBridgeToCloudWatchLogs\",\n      \"Effect\": \"Allow\"\
          ,\n      \"Principal\": {\n        \"Service\": \"events.amazonaws.com\"\
          \n      },\n      \"Action\": [\n        \"logs:CreateLogStream\",\n   \
          \     \"logs:PutLogEvents\"\n      ],\n      \"Resource\": \"arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/events/${ApplicationName}-events:*\"\
          \n    }\n  ]\n}\n"
Outputs:
  SignUpAPI:
    Description: API Gateway endpoint for signing up users
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/auth/signup
    Export:
      Name: SignUpAPI
  SignInAPI:
    Description: API Gateway endpoint for signing in users
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/auth/signin
    Export:
      Name: SignInAPI
  CognitoUserPool:
    Description: Cognito User Pool ID
    Value:
      Ref: CognitoUserPool
    Export:
      Name: CognitoUserPool
  CognitoUserPoolClient:
    Description: Cognito User Pool Client ID
    Value:
      Ref: CognitoUserPoolClient
    Export:
      Name: CognitoUserPoolClient
  CognitoUserPoolDomain:
    Description: Cognito User Pool Domain
    Value:
      Fn::Sub: https://lorgyaya-auth-domain.auth.${AWS::Region}.amazoncognito.com
    Export:
      Name: CognitoUserPoolDomain
