AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: An app that includes a DynamoDB table, a Lambda function that writes to DynamoDB, and a scheduled EventBridge event

Parameters:
  ApplicationName:
    Type: String
    Default: lorgyaya
    Description: Application name

#TODO: Figure out how to auto deploy API gateway

Globals:
  Api:
    OpenApiVersion: 3.0.3
    EndpointConfiguration: REGIONAL
    AlwaysDeploy: true
    Auth:
      DefaultAuthorizer: CognitoAuthorizer
      Authorizers:
        CognitoAuthorizer:
          UserPoolArn: !GetAtt CognitoUserPool.Arn


Resources:
  EventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub '${ApplicationName}-event-bus'

  CognitoUserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: !Sub '${ApplicationName}-users'
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      UsernameAttributes:
        - email
        # add attribute for phone number later
      
      #TODO: add identity providers
      UsernameConfiguration:
        CaseSensitive: false
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
          Mutable: true
          Required: true
        - Name: given_name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: family_name
          AttributeDataType: String
          Mutable: true
          Required: true
        # add schema attribute for a phone numnber as well so that we dont allow users to use multiple emails

  # Cognito User Pool App Client
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Sub "${ApplicationName}-userpool-client"
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - urn:ietf:wg:oauth:2.0:oob
      LogoutURLs:
        - urn:ietf:wg:oauth:2.0:oob
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      PreventUserExistenceErrors: ENABLED
      AccessTokenValidity: 1 # hours
      IdTokenValidity: 1 # hours
      RefreshTokenValidity: 30 # days
  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref CognitoUserPool
      Domain: lorgyaya-auth-domain

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      TableName: item_data_tracker
      AttributeDefinitions:
        - AttributeName: primary_key
          AttributeType: S
        - AttributeName: sort_key
          AttributeType: S
      KeySchema:
        - AttributeName: primary_key
          KeyType: HASH
        - AttributeName: sort_key
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      ProvisionedThroughput:
        ReadCapacityUnits: 0
        WriteCapacityUnits: 0

  # APIT Gateway
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchRole.Arn

  ApiGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ServerlessRestApi.Deployment
      RestApiId: !Ref ServerlessRestApi
      StageName: test
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: '/*'
          HttpMethod: '*'
          MetricsEnabled: true
          DataTraceEnabled: true

  # Setup Lambda Handlers
  SignUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth/signup.handler
      Runtime: nodejs18.x
      CodeUri: ./
      Environment:
        Variables:
          USER_POOL_ID: !Ref CognitoUserPool
          COGNITO_CLIENT_ID: !Ref CognitoUserPoolClient
          AWS_REGION: !Ref AWS::Region
      Events:
        SignUpAPI:
          Type: Api
          Properties:
            Path: /auth/signup
            Method: POST
            Auth:
              Authorizer: NONE
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - cognito-idp:SignUp
            Resource: !GetAtt CognitoUserPool.Arn
      Environment:
        Variables:
          USER_POOL_ID: !Ref CognitoUserPool
          COGNITO_CLIENT_ID: !Ref CognitoUserPoolClient    
    
  SignInFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth/signin.handler
      Runtime: nodejs18.x
      CodeUri: ./
      Environment:
        Variables:
          USER_POOL_ID: !Ref CognitoUserPool
          COGNITO_CLIENT_ID: !Ref CognitoUserPoolClient
          AWS_REGION: !Ref AWS::Region
      Events:
        SignInAPI:
          Type: Api
          Properties:
            Path: /auth/signin
            Method: POST
            Auth:
              Authorizer: NONE
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - cognito-idp:InitiateAuth
            Resource: !GetAtt CognitoUserPool.Arn
      Environment:
        Variables:
          USER_POOL_ID: !Ref CognitoUserPool
          COGNITO_CLIENT_ID: !Ref CognitoUserPoolClient
  
  VerifyFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth/verify.handler
      Runtime: nodejs18.x
      CodeUri: ./
      Environment:
        Variables:
          USER_POOL_ID: !Ref CognitoUserPool
          COGNITO_CLIENT_ID: !Ref CognitoUserPoolClient
          EVENT_BUS_NAME: !Ref EventBus
      Events:
        VerifyAPI:
          Type: Api
          Properties:
            Path: /auth/verify
            Method: POST
            Auth:
              Authorizer: NONE
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - cognito-idp:ConfirmSignUp
              - cognito-idp:AdminGetUser
              - events:PutEvents
            Resource: !GetAtt CognitoUserPool.Arn
          - Effect: Allow
            Action: events:PutEvents
            Resource: !GetAtt EventBus.Arn

  FetchFromDbFunction:
    Type: AWS:Serverless::Function
    Properties:
      Handler: functions/fetchFromDb.handler
      Runtime: nodejs18.x
      CodeUri: ./
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DynamoDBTable
      Events:
        MyApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /data/fetch
            Method: POST  
            Auth:
              Authorizer: MyCognitoAuthorizer
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable

  # Test api gateway
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Cors: "'*'"
      Auth:
        DefaultAuthorizer: MyCognitoAuthorizer
        Authorizers:
          MyCognitoAuthorizer:
            UserPoolArn:
              Fn::GetAtt: [CognitoUserPool, Arn]

  AddHouseFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/addHouse.handler
      Runtime: nodejs18.x
      CodeUri: ./
      Environment:
        Variables:
          EVENT_BUS_NAME: !Ref EventBus
      Events:
        MyApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /data/house/add
            Method: POST
            Auth:
              Authorizer: MyCognitoAuthorizer
      Policies:
        - Statement:
          - Effect: Allow
            Action: events:PutEvents
            Resource: !GetAtt EventBus.Arn
          - Effect: Allow
            Action:
              - cognito-idp:GetUser
            Resource: !GetAtt CognitoUserPool.Arn
    

  CreateItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/createItem.handler
      Runtime: nodejs18.x
      CodeUri: ./
      Environment:
        Variables:
          EVENT_BUS_NAME: !Ref EventBus
      Events:
        MyApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /data/item/create
            Method: POST
            Auth:
              Authorizer: MyCognitoAuthorizer
      Policies:
        - Statement:
          - Effect: Allow
            Action: events:PutEvents
            Resource: !GetAtt EventBus.Arn
          - Effect: Allow
            Action:
              - cognito-idp:GetUser
            Resource: !GetAtt CognitoUserPool.Arn

  AddItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/addItem.handler
      Runtime: nodejs18.x
      CodeUri: ./
      Environment:
        Variables:
          EVENT_BUS_NAME: !Ref EventBus
      Events:
        MyApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /data/house/item/add
            Method: POST
            Auth:
              Authorizer: MyCognitoAuthorizer
      Policies:
        - Statement:
          - Effect: Allow
            Action: events:PutEvents
            Resource: !GetAtt EventBus.Arn
          - Effect: Allow
            Action:
              - cognito-idp:GetUser
            Resource: !GetAtt CognitoUserPool.Arn

  UpdateItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/updateHouseItemInfo.handler
      Runtime: nodejs18.x
      CodeUri: ./
      Environment:
        Variables:
          EVENT_BUS_NAME: !Ref EventBus
      Events:
        MyApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /data/house/item/udpate
            Method: POST
            Auth:
              Authorizer: MyCognitoAuthorizer
      Policies:
        - Statement:
          - Effect: Allow
            Action: events:PutEvents
            Resource: !GetAtt EventBus.Arn
          - Effect: Allow
            Action:
              - cognito-idp:GetUser
            Resource: !GetAtt CognitoUserPool.Arn

  # userData function
  UserDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/userDataToDb.handler
      Runtime: nodejs18.x
      CodeUri: ./
      Environment:
        Variables:
          USER_POOL_ID: !Ref CognitoUserPool
          COGNITO_CLIENT_ID: !Ref CognitoUserPoolClient
          DYNAMODB_TABLE_NAME: !Ref DynamoDBTable
      Events:
        UserDataAPI:
          Type: Api
          Properties:
            Path: /data/user_data
            Method: POST
            Auth:
              Authorizer: NONE
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - cognito-idp:AdminGetUser
            Resource: !GetAtt CognitoUserPool.Arn
          - Effect: Allow
            Action:
              - events:ReceiveEvent
            Resource: !GetAtt EventBus.Arn  
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable

  # Log Groups:
  EventBridgeLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/events/${ApplicationName}-events
      RetentionInDays: 14
  
  
  #TODO: Figure out how to log cloud watch events

  #Event Bridge Rules
  # CognitoEventRule:
  #   Type: AWS::Events::Rule
  #   Properties:
  #     Description: Capture profile information to dynamodb
  #     EventPattern:
  #       source:
  #         - aws.cognito-idp
  #       detail-type:
  #         - Cognito User Pool confirmation
  #       detail:
  #         userPoolId:
  #           - !Ref CognitoUserPool
  #     State: ENABLED
  #     Targets:
  #       - Arn: !GetAtt UserDataFunction.Arn
  #         Id: UserDataFunctionTarget


  # Authorizers


  CustomAuthEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Rule to capture custom auth events and trigger the userDataToDb function
      EventBusName: !Ref EventBus
      EventPattern:
        source:
          - custom.auth
          - addupdate.house
          - create.item
          - addupdate.item
          - add.item
          - update.house.item
        detail-type:
          - ProfileCreation
          - AddUpdateHouse
          - CreateItem
          - AddUpdateItem
          - AddItem
          - UpdateHouseItem
        detail:
          eventName:
            - USER_PROFILE_CREATE
            - HOUSE_ADD_UPDATE
            - CREATE_ITEM
            - ADD_ITEM
            - UPDATE_HOUSE_ITEM
      State: ENABLED
      Targets:
        - Arn: !GetAtt UserDataFunction.Arn
          Id: UserDataFunctionTarget
        - Arn: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/events/${ApplicationName}-events:*
          Id: EventLogTarget
          RetryPolicy:
            MaximumRetryAttempts: 3

  UserDataFunctionEventPermission2:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt UserDataFunction.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CustomAuthEventRule.Arn

  #Policies
  EventBridgeCLoudWatchLogsPolicy:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EventBridgeCloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/events/${ApplicationName}-events:*
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource: !GetAtt EventBus.Arn

  # Add resource policy for CloudWatch Logs
  EventBridgeLogGroupPolicy:
    Type: AWS::Logs::ResourcePolicy
    Properties:
      PolicyName: EventBridgeToCloudWatchLogs
      PolicyDocument: !Sub |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "EventBridgeToCloudWatchLogs",
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com"
              },
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/events/${ApplicationName}-events:*"
            }
          ]
        }



Outputs:
  SignUpAPI:
    Description: API Gateway endpoint for signing up users
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/auth/signup"
    Export:
      Name: SignUpAPI

  SignInAPI:
    Description: API Gateway endpoint for signing in users
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/auth/signin"
    Export:
      Name: SignInAPI

  CognitoUserPool:
    Description: Cognito User Pool ID
    Value: !Ref CognitoUserPool
    Export:
      Name: CognitoUserPool

  CognitoUserPoolClient:
    Description: Cognito User Pool Client ID
    Value: !Ref CognitoUserPoolClient
    Export:
      Name: CognitoUserPoolClient

  CognitoUserPoolDomain:
    Description: Cognito User Pool Domain
    #Value: !GetAtt CognitoUserPoolDomain.Id
    Value: !Sub "https://lorgyaya-auth-domain.auth.${AWS::Region}.amazoncognito.com"
    Export:
      Name: CognitoUserPoolDomain
  
